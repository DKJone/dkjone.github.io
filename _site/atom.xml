<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://0.0.0.0:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2024-01-23T15:50:26+08:00</updated><id>http://0.0.0.0:4000/atom.xml</id><title type="html">DKJone’s blog</title><subtitle>Listen to your heart</subtitle><author><name>DKJone</name></author><entry><title type="html">微信破解版</title><link href="http://0.0.0.0:4000/2020/07/01/DKWechatHelper.html" rel="alternate" type="text/html" title="微信破解版" /><published>2020-07-01T00:00:00+08:00</published><updated>2020-07-01T23:27:01+08:00</updated><id>http://0.0.0.0:4000/2020/07/01/DKWechatHelper</id><content type="html" xml:base="http://0.0.0.0:4000/2020/07/01/DKWechatHelper.html"><![CDATA[<h1 id="dkwechathelper">DKWechatHelper</h1>

<p>不止于抢红包，功能丰富的微信插件。本软件已成功运行在(iphone7-iphone11、iPad) 
给个⭐️不迷路↗️ <br />
<a href="https://github.com/DKWechatHelper/DKWechatHelper/releases/tag/1.0.3">v1.0.3</a>适用微信7.0.13<br />
<a href="https://github.com/DKWechatHelper/DKWechatHelper/releases/tag/1.0.2">v1.0.2</a>适用微信7.0.11<br />
<a href="https://github.com/DKWechatHelper/DKWechatHelper/releases/tag/1.0.1">v1.0.1</a>适用微信7.0.8~7.0.10<br />
<a href="https://github.com/DKWechatHelper/DKWechatHelper/releases/tag/1.0.0">v1.0.0</a> 适用微信7.0.0-7.0.3</p>

<p>更多更新内容请查看<a href="https://github.com/DKWechatHelper/DKWechatHelper/CHANGELOG.md">CHANGELOG</a></p>

<h2 id="特色">特色</h2>
<p>1.完全融入微信7.0UI风格，沉浸式体验 <br />
2.完全免费的全功能插件<br />
3.非越狱可后台抢红包 <br />
4.安全高效源码公开
5.设置方便，手机无需越狱</p>
<h2 id="功能">功能</h2>
<p>1.自动抢红包 <br />
2.消息防撤回 <br />
3.微信步数修改 <br />
4.小游戏作弊（剪刀石头布和掷骰子）   <br />
5.自动抢红包高级配置 <br />
更多请查看下图： <br />
<img src="https://upload-images.jianshu.io/upload_images/4066843-37413f551adf2752.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IMG_0223.jpg" /></p>

<h2 id="使用">使用：</h2>
<p>1.源码学习 <br />
    下载本项目，下载砸壳后的微信（7.0以上）（我给你准备了个 ）</p>
<ul>
  <li><a href="https://pan.baidu.com/s/15pVma66Ea822YVGrBa2GHw">7.0.0</a></li>
  <li><a href="https://pan.baidu.com/s/1SHZHfu94Z_jhCkaaFDx8pA">7.0.2</a></li>
  <li><a href="https://pan.baidu.com/s/11VoUXPC4vb5zg8HzP3kC0Q">7.0.8-<em>提取码:h54d</em></a></li>
  <li><a href="https://pan.baidu.com/s/1mU_mezsWhqL2-AY0PB-vVg">7.0.11-<em>提取码: 2igg</em></a></li>
  <li><a href="https://pan.baidu.com/s/1rqB0pV4zMEB6Z3VJTsTa8Q">7.0.13-<em>提取码: nx4m</em></a> <br />
将下载的微信放到’/dkhelper/dkhelper/TargetApp/’目录下该目录下有一个空白文件’put ipa or app here‘，和它放在同一文件夹下即可，修改项目BundleId及签名信息，选择真机设备运行即可</li>
</ul>

<p>2.开发者： <br />
    下载以下ipa后重签名应用：</p>
<ul>
  <li><a href="https://pan.baidu.com/s/1-zEUQRGn3H4bZVqHpyffzQ">未签名版7.0.0</a></li>
  <li><a href="https://pan.baidu.com/s/1sOPCqnCPxSdIKq7TKuHK9g">未签名版7.0.11-<em>提取码: fe9f</em></a></li>
  <li><a href="https://pan.baidu.com/s/1DgSl5u0Gip3cNdqZmRFEWw">未签名版7.0.13-<em>提取码: fhes</em></a><br />
  注：推荐使用<a href="https://github.com/DanTheMan827/ios-app-signer">ios-app-signer</a>签名，使用方法自行百度</li>
</ul>

<p>3.普通用户： <br />
    前往以下地址下载：上方未签名版
    下载后使用 <a href="http://www.cydiaimpactor.com/">Cydia Impactor</a>安装</p>

<p>4.越狱用户：
<a href="https://pan.baidu.com/s/1NyDrM_VF3JYv7PAyW_VkcQ">deb安装包地址 - <em>提取码: dq53</em></a><br />
或添加源<code class="language-plaintext highlighter-rouge">https://dkjone.github.io/</code>下载</p>

<h3 id="请我喝杯️">请我喝杯☕️</h3>

<table>
  <thead>
    <tr>
      <th>微信</th>
      <th>支付宝</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><img src="https://upload-images.jianshu.io/upload_images/4066843-2d18218a3c11e2c4.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IMG_4272.JPG" /></td>
      <td><img src="https://upload-images.jianshu.io/upload_images/4066843-2aa3ce5b2d4d89ec.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IMG_4286.JPG" /></td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="感谢">感谢：</h3>
<p>本插件所有内容均为免费内容，其中使用了部分已存在项目源码构建。感谢以下项目的开源：<br />
1.<a href="https://github.com/TKkk-iOSer/WeChatPlugin-iOS">WeChatPlugin-iOS</a> <br />
2.<a href="https://github.com/buginux/WeChatRedEnvelop">WeChatRedEnvelop</a> <br />
3.<a href="https://github.com/AloneMonkey/MonkeyDev">MonkeyDev</a> <br />
4.<a href="https://www.jianshu.com/p/e797ba55e336">微信共存防封版伪代码分析</a></p>]]></content><author><name>DKJone</name></author><category term="红包" /><category term="微信" /><summary type="html"><![CDATA[不止于抢红包，功能丰富的微信插件。]]></summary></entry><entry><title type="html">Swift4.2新特性 &amp;amp; XCode 10更新</title><link href="http://0.0.0.0:4000/2018/09/19/Swift4.2%E6%96%B0%E7%89%B9%E6%80%A7-&-XCode-10%E6%9B%B4%E6%96%B0.html" rel="alternate" type="text/html" title="Swift4.2新特性 &amp;amp; XCode 10更新" /><published>2018-09-19T00:00:00+08:00</published><updated>2018-02-28T07:27:01+08:00</updated><id>http://0.0.0.0:4000/2018/09/19/Swift4.2%E6%96%B0%E7%89%B9%E6%80%A7%20%20&amp;%20XCode%2010%E6%9B%B4%E6%96%B0</id><content type="html" xml:base="http://0.0.0.0:4000/2018/09/19/Swift4.2%E6%96%B0%E7%89%B9%E6%80%A7-&amp;-XCode-10%E6%9B%B4%E6%96%B0.html"><![CDATA[<h3 id="介绍">介绍:</h3>
<p>###swift语法更新</p>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0079-upgrade-self-from-weak-to-strong.md">SE-0079</a> 允许<code class="language-plaintext highlighter-rouge">self</code>在闭包中使用可选绑定</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift3</span>
<span class="nx">guard</span> <span class="kd">let</span> <span class="s2">`self`</span> <span class="o">=</span> <span class="nb">self</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>

<span class="c1">// swift4.2</span>
<span class="nx">guard</span> <span class="kd">let</span> <span class="nb">self</span> <span class="o">=</span> <span class="nb">self</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>

</code></pre></div></div>
<p>使用上面代码分别在swift3、swift4.2的闭包中将弱引用的self转为强引用。但是Apple的Chris Lattner表示swift3的写法是“<a href="https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160118/007425.html">一个编译器错误</a>”。</p>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0197-remove-where.md">SE-0197</a>添加<code class="language-plaintext highlighter-rouge">removeAll(where:)</code>方法到标准库，用于删除集合中满足条件的元素</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//swift 3</span>
<span class="k">var</span> <span class="nv">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="c1">// 删除奇数</span>
<span class="n">nums</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="o">!</span><span class="nf">isOdd</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span>

<span class="c1">//swift 4.2</span>
<span class="n">nums</span><span class="o">.</span><span class="nf">removeAll</span><span class="p">(</span><span class="nv">where</span><span class="p">:</span> <span class="n">isOdd</span><span class="p">)</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">filter</code>方法完成此操作存在性能问题 1.重新分配了内存，2.需完整拷贝原数组</p>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0199-bool-toggle.md">SE-0199</a>添加<code class="language-plaintext highlighter-rouge">.toggle()</code>方法到BOOL值，让原值反转</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//swift 3</span>
<span class="n">myVar</span><span class="o">.</span><span class="n">prop1</span><span class="o">.</span><span class="n">prop2</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="o">!</span><span class="n">myVar</span><span class="o">.</span><span class="n">prop1</span><span class="o">.</span><span class="n">prop2</span><span class="o">.</span><span class="n">enabled</span>

<span class="c1">//swift 4.2</span>
<span class="n">myVar</span><span class="o">.</span><span class="n">prop1</span><span class="o">.</span><span class="n">prop2</span><span class="o">.</span><span class="n">enabled</span><span class="o">.</span><span class="nf">toggle</span><span class="p">()</span>

</code></pre></div></div>
<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md">SE-0202</a>随机数生成API</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 生成随机数</span>
<span class="kt">Int</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="mi">1</span><span class="o">...</span><span class="mi">1000</span><span class="p">)</span>
<span class="kt">UInt8</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">.</span><span class="n">min</span> <span class="o">...</span> <span class="o">.</span><span class="n">max</span><span class="p">)</span>
<span class="kt">Double</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="mi">1</span><span class="p">)</span>

<span class="c1">// 随机从数组中取值</span>
<span class="k">let</span> <span class="nv">emotions</span> <span class="o">=</span> <span class="s">"😀😂😊😍🤪😎😩😭😡"</span>
<span class="k">let</span> <span class="nv">randomEmotion</span> <span class="o">=</span> <span class="n">emotions</span><span class="o">.</span><span class="nf">randomElement</span><span class="p">()</span><span class="o">!</span> <span class="c1">//可能是其中一个</span>

<span class="c1">// 数组乱序</span>
<span class="k">let</span> <span class="nv">numbers</span> <span class="o">=</span> <span class="mi">1</span><span class="o">...</span><span class="mi">10</span>
<span class="k">let</span> <span class="nv">shuffled</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="nf">shuffled</span><span class="p">()</span><span class="c1">//1-10的乱序数组</span>

</code></pre></div></div>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0204-add-last-methods.md">SE-0204</a>添加<code class="language-plaintext highlighter-rouge">last(where:)</code> 和<code class="language-plaintext highlighter-rouge">lastIndex(where:) </code>获取集合中最后满足条件的元素和位置</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift 3</span>
<span class="k">let</span> <span class="nv">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
<span class="n">a</span><span class="o">.</span><span class="nf">first</span><span class="p">(</span><span class="nv">where</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">&gt;</span> <span class="mi">25</span> <span class="p">})</span>         <span class="c1">// 30</span>
<span class="n">a</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">where</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">&gt;</span> <span class="mi">25</span> <span class="p">})</span>         <span class="c1">// 1</span>
<span class="n">a</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>                     <span class="c1">// 2</span>
<span class="c1">// 需要获取最后的需要将集合倒序</span>
<span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="nf">reversed</span><span class="p">()</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">where</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">&gt;</span> <span class="mi">25</span> <span class="p">})?</span><span class="o">.</span><span class="n">base</span><span class="p">)</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="n">a</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">before</span><span class="p">:</span> <span class="nv">$0</span><span class="p">)</span> <span class="p">})</span>
<span class="c1">// swift 4.2</span>
<span class="n">a</span><span class="o">.</span><span class="nf">last</span><span class="p">(</span><span class="nv">where</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">&gt;</span> <span class="mi">25</span> <span class="p">})</span>          <span class="c1">// 40</span>
<span class="n">a</span><span class="o">.</span><span class="nf">lastIndex</span><span class="p">(</span><span class="nv">where</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">&gt;</span> <span class="mi">25</span> <span class="p">})</span>     <span class="c1">// 7</span>
<span class="n">a</span><span class="o">.</span><span class="nf">lastIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>                 <span class="c1">// 6</span>
</code></pre></div></div>
<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md">SE-0206</a><code class="language-plaintext highlighter-rouge">Hashable</code>重新设计</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// swift 3
extension Point: Equatable{
    func ==(lhs: Testhash, rhs: Testhash) -&gt; Bool {
        return lhs.hashValue == rhs.hashValue
    }
}
extension Point: Equatable {
    var hashValue: Int {
        get {
            return self.x + self.y * self.x
        }
    }
}

// swift 4.2
extension Point: Equatable {
    static func ==(lhs: Point, rhs: Point) -&gt; Bool {
        // Ignore distanceFromOrigin for determining equality
        return lhs.x == rhs.x &amp;&amp; lhs.y == rhs.y
    }
}
extension Point: Hashable {
    func hash(into hasher: inout Hasher) {
        // Ignore distanceFromOrigin for hashing
        hasher.combine(x)
        hasher.combine(y)
    }
}

</code></pre></div></div>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0207-containsOnly.md">SE-0207</a>集合新增<code class="language-plaintext highlighter-rouge">.allSatisfy</code>方法，判断是否所有元素都满足闭包内的条件</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift 3</span>
<span class="c1">//判断所有数是否都是奇数</span>
<span class="o">!</span><span class="n">nums</span><span class="o">.</span><span class="n">contains</span> <span class="p">{</span> <span class="o">!</span><span class="nf">isOdd</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span>
<span class="c1">//swift 4.2</span>
<span class="n">nums</span><span class="o">.</span><span class="nf">allSatisfy</span><span class="p">(</span><span class="n">isOdd</span><span class="p">)</span>
</code></pre></div></div>
<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md" title="Conditional conformances">SE-0143</a>条件一致性，现在可以在扩展(<code class="language-plaintext highlighter-rouge">extension</code>)中合成协议一致性，而不仅仅是在类型定义上（扩展必须仍然位于与类型定义相同的文件中），并且允许自动合成<code class="language-plaintext highlighter-rouge">Equatable</code>, <code class="language-plaintext highlighter-rouge">Hashable</code>, <code class="language-plaintext highlighter-rouge">Encodable</code>, 和 <code class="language-plaintext highlighter-rouge">Decodable</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">func</span> <span class="nf">isEncodable</span><span class="p">(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">value</span> <span class="k">is</span> <span class="kt">Encodable</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">encodableArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="c1">//Swift 4.1</span>
<span class="nf">isEncodable</span><span class="p">(</span><span class="n">encodableArray</span><span class="p">)</span> <span class="c1">// false</span>

<span class="c1">//Swift 4.2</span>
<span class="nf">isEncodable</span><span class="p">(</span><span class="n">encodableArray</span><span class="p">)</span> <span class="c1">// true</span>
<span class="kd">struct</span> <span class="kt">NonEncodable</span> <span class="p">{}</span>
<span class="k">let</span> <span class="nv">nonEncodableArray</span> <span class="o">=</span> <span class="p">[</span><span class="kt">NonEncodable</span><span class="p">(),</span> <span class="kt">NonEncodable</span><span class="p">()]</span>
<span class="nf">isEncodable</span><span class="p">(</span><span class="n">nonEncodableArray</span><span class="p">)</span><span class="c1">// false 在不满足条件一致性条件时，动态查验不成功。</span>

<span class="kd">enum</span> <span class="kt">Either</span><span class="o">&lt;</span><span class="kt">Left</span><span class="p">,</span> <span class="kt">Right</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nf">left</span><span class="p">(</span><span class="kt">Left</span><span class="p">)</span>
    <span class="k">case</span> <span class="nf">right</span><span class="p">(</span><span class="kt">Right</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 扩展后无需写具体实现，编译器自动合成</span>
<span class="kd">extension</span> <span class="kt">Either</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="k">where</span> <span class="kt">Left</span><span class="p">:</span> <span class="kt">Equatable</span><span class="p">,</span> <span class="kt">Right</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{}</span>
<span class="kd">extension</span> <span class="kt">Either</span><span class="p">:</span> <span class="kt">Hashable</span> <span class="k">where</span> <span class="kt">Left</span><span class="p">:</span> <span class="kt">Hashable</span><span class="p">,</span> <span class="kt">Right</span><span class="p">:</span> <span class="kt">Hashable</span> <span class="p">{}</span>

<span class="kt">Either</span><span class="o">&lt;</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">String</span><span class="o">&gt;.</span><span class="nf">left</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="o">==</span> <span class="kt">Either</span><span class="o">&lt;</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">String</span><span class="o">&gt;.</span><span class="nf">left</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>

</code></pre></div></div>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0212-compiler-version-directive.md">SE-0212</a>新增编译器版本指令</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift 3</span>
<span class="cp">#if swift(&gt;=4.1) || (swift(&gt;=3.3) &amp;&amp; !swift(&gt;=4.0))</span>
<span class="c1">// Code targeting the Swift 4.1 compiler and above.</span>
<span class="cp">#endif</span>

<span class="cp">#if swift(&gt;=4.1.50) || (swift(&gt;=3.4) &amp;&amp; !swift(&gt;=4.0))</span>
<span class="c1">// Code targeting the Swift 4.2 compiler and above.</span>
<span class="cp">#endif</span>

<span class="cp">#if swift(&gt;=5.0) || (swift(&gt;=4.1.50) &amp;&amp; !swift(&gt;=4.2)) || (swift(&gt;=3.5) &amp;&amp; !swift(&gt;=4.0))</span>
<span class="c1">// Code targeting the Swift 5.0 compiler and above.</span>
<span class="cp">#endif</span>

<span class="c1">//swift4</span>
<span class="cp">#if swift(&gt;=4.1) || (swift(&gt;=3.3) &amp;&amp; !swift(&gt;=4.0))</span>
<span class="c1">// Code targeting the Swift 4.1 compiler and above.</span>
<span class="c1">// 低版本编译器兼容代码.</span>
<span class="cp">#endif</span>

<span class="cp">#if compiler(&gt;=4.2)</span>
<span class="c1">// Code targeting the Swift 4.2 compiler and above.</span>
<span class="cp">#endif</span>

<span class="cp">#if compiler(&gt;=5.0)</span>
<span class="c1">// Code targeting the Swift 5.0 compiler and above.</span>
<span class="cp">#endif</span>

</code></pre></div></div>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0210-key-path-offset.md">SE-0210</a>添加<code class="language-plaintext highlighter-rouge">MemoryLayout&lt;T&gt;.offset(of:)</code>方法，返回一个指针地址偏移后的T类型的值</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// C语言</span>
<span class="c1">// Layout of one of our vertex entries</span>
<span class="kd">struct</span> <span class="kt">MyVertex</span> <span class="p">{</span>
  <span class="n">float</span> <span class="n">position</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
  <span class="n">float</span> <span class="n">normal</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
  <span class="n">uint16_t</span> <span class="n">texcoord</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="p">};</span>

<span class="kd">enum</span> <span class="kt">MyVertexAttribute</span> <span class="p">{</span> <span class="kt">Position</span><span class="p">,</span> <span class="kt">Normal</span><span class="p">,</span> <span class="kt">TexCoord</span> <span class="p">};</span>

<span class="nf">glVertexAttribPointer</span><span class="p">(</span><span class="kt">Position</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="kt">GL_FLOAT</span><span class="p">,</span> <span class="kt">GL_FALSE</span><span class="p">,</span>
                      <span class="nf">sizeof</span><span class="p">(</span><span class="kt">MyVertex</span><span class="p">),</span> <span class="p">(</span><span class="n">void</span><span class="o">*</span><span class="p">)</span><span class="nf">offsetof</span><span class="p">(</span><span class="kt">MyVertex</span><span class="p">,</span> <span class="n">position</span><span class="p">));</span>
<span class="nf">glVertexAttribPointer</span><span class="p">(</span><span class="kt">Normal</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="kt">GL_FLOAT</span><span class="p">,</span> <span class="kt">GL_FALSE</span><span class="p">,</span>
                      <span class="nf">sizeof</span><span class="p">(</span><span class="kt">MyVertex</span><span class="p">),</span> <span class="p">(</span><span class="n">void</span><span class="o">*</span><span class="p">)</span><span class="nf">offsetof</span><span class="p">(</span><span class="kt">MyVertex</span><span class="p">,</span> <span class="n">normal</span><span class="p">));</span>
<span class="nf">glVertexAttribPointer</span><span class="p">(</span><span class="kt">TexCoord</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kt">GL_UNSIGNED_BYTE</span><span class="p">,</span> <span class="kt">GL_TRUE</span><span class="p">,</span>
                      <span class="nf">sizeof</span><span class="p">(</span><span class="kt">MyVertex</span><span class="p">),</span> <span class="p">(</span><span class="n">void</span><span class="o">*</span><span class="p">)</span><span class="nf">offsetof</span><span class="p">(</span><span class="kt">MyVertex</span><span class="p">,</span> <span class="n">texcoord</span><span class="p">));</span>
                      
<span class="c1">//swift 4.2 </span>
<span class="kd">struct</span> <span class="kt">Point</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="kt">Double</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">Size</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">w</span><span class="p">,</span> <span class="nv">h</span><span class="p">:</span> <span class="kt">Double</span>

  <span class="k">var</span> <span class="nv">area</span><span class="p">:</span> <span class="kt">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="n">w</span><span class="o">*</span><span class="n">h</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">Rect</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">origin</span><span class="p">:</span> <span class="kt">Point</span>
  <span class="k">var</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">Size</span>
<span class="p">}</span>

<span class="kt">MemoryLayout</span><span class="o">&lt;</span><span class="kt">Rect</span><span class="o">&gt;.</span><span class="nf">offset</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span><span class="p">)</span> <span class="c1">// =&gt; 0</span>
<span class="kt">MemoryLayout</span><span class="o">&lt;</span><span class="kt">Rect</span><span class="o">&gt;.</span><span class="nf">offset</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span><span class="p">)</span> <span class="c1">// =&gt; 8</span>
<span class="kt">MemoryLayout</span><span class="o">&lt;</span><span class="kt">Rect</span><span class="o">&gt;.</span><span class="nf">offset</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">w</span><span class="p">)</span> <span class="c1">// =&gt; 16</span>
<span class="kt">MemoryLayout</span><span class="o">&lt;</span><span class="kt">Rect</span><span class="o">&gt;.</span><span class="nf">offset</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">h</span><span class="p">)</span> <span class="c1">// =&gt; 24</span>
<span class="kt">MemoryLayout</span><span class="o">&lt;</span><span class="kt">Rect</span><span class="o">&gt;.</span><span class="nf">offset</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">area</span><span class="p">)</span> <span class="c1">// =&gt; nil</span>

</code></pre></div></div>
<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0205-withUnsafePointer-for-lets.md">SE-0205</a>只读属性<code class="language-plaintext highlighter-rouge">withUnsafePointer(to:_:)</code> 和 <code class="language-plaintext highlighter-rouge">withUnsafeBytes(of:_:)</code> 顶层方法扩展</p>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md">SE-0196</a>编译器指令<code class="language-plaintext highlighter-rouge">#warning</code>和<code class="language-plaintext highlighter-rouge">#error</code></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// swift4.2</span>
 <span class="cp">#warning("TODO: missing implementation")//编译器警告</span>
 <span class="cp">#error("This playground requires UIKit or AppKit")//编译失败报错</span>
</code></pre></div></div>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md">SE-0195</a>动态成员查找，通过<code class="language-plaintext highlighter-rouge">@dynamicMemberLookup</code>声明属性 ，以获取 Python等语言的支持</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> // Python
 class Dog:
    def __init__(self, name):
        self.name = name
        self.tricks = []    # creates a new empty list for each dog
    def add_trick(self, trick):
        self.tricks.append(trick)
        return self
 ----------------------------------------       
  //swift 4.2
  // import DogModule
  // import DogModule.Dog as Dog    // an alternate
  let Dog = Python.import("DogModule.Dog")
  let dog = Dog("Brianna")
  dog.add_trick("Roll over")
  let cuteDog = Dog("Kaylee").add_trick("snore")
</code></pre></div></div>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md">SE-0194</a>遍历普通枚举值</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">Terrain</span><span class="p">:</span> <span class="kt">CaseIterable</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">water</span>
    <span class="k">case</span> <span class="n">forest</span>
    <span class="k">case</span> <span class="n">desert</span>
    <span class="k">case</span> <span class="n">road</span>
<span class="p">}</span>

<span class="kt">Terrain</span><span class="o">.</span><span class="n">allCases</span>
<span class="kt">Terrain</span><span class="o">.</span><span class="n">allCases</span><span class="o">.</span><span class="n">count</span>

</code></pre></div></div>
<p>使用<code class="language-plaintext highlighter-rouge">CaseIterable</code>后，枚举可以通过<code class="language-plaintext highlighter-rouge">.allCases</code>获取所有枚举值的数组</p>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0193-cross-module-inlining-and-specialization.md">SE-0193</a>模块间调用， 用<code class="language-plaintext highlighter-rouge">@inlinable</code> and <code class="language-plaintext highlighter-rouge">@usableFromInline</code>声明公共接口</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Inside CollectionAlgorithms module:</span>
<span class="kd">extension</span> <span class="kt">Sequence</span> <span class="k">where</span> <span class="kt">Element</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{</span>
    <span class="c1">/// Returns `true` iff all elements in the sequence are equal.</span>
    <span class="kd">@inlinable</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">allEqual</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">iterator</span> <span class="o">=</span> <span class="nf">makeIterator</span><span class="p">()</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">first</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="nf">next</span><span class="p">()</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span>
        <span class="p">}</span>
        <span class="k">while</span> <span class="k">let</span> <span class="nv">next</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="nf">next</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">first</span> <span class="o">!=</span> <span class="n">next</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">false</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="nf">allEqual</span><span class="p">()</span>
<span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="nf">allEqual</span><span class="p">()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="nf">allEqual</span><span class="p">()</span>
</code></pre></div></div>

<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md">SE-0054</a>废除隐式可选类型</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">x</span><span class="p">:</span> <span class="kt">Int</span><span class="o">!</span> <span class="o">=</span> <span class="mi">5</span>   <span class="c1">//x:Int！</span>
<span class="k">let</span> <span class="nv">y</span> <span class="o">=</span> <span class="n">x</span>         <span class="c1">//y:Int?</span>
<span class="k">let</span> <span class="nv">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">0</span>     <span class="c1">//z:Int</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">X</code>在使用时被强制解包为Int类型，<code class="language-plaintext highlighter-rouge">！</code>声明的类型表示可选类型，并且告知编译器可以强制解包<code class="language-plaintext highlighter-rouge">[Int!]</code>和<code class="language-plaintext highlighter-rouge">&lt;T!&gt;</code>等类型将不再可用，类似的自动类型推导也将提示修改为指定类型</p>

<h2 id="xcode-10更新">###XCode 10更新</h2>
<ol>
  <li>多行编辑：<code class="language-plaintext highlighter-rouge">control</code> + <code class="language-plaintext highlighter-rouge">shift</code> +鼠标单击
    <blockquote>
      <p>多行编辑在Mac OS10.14中可以在众多编辑器中使用如Sublime Text3中可以用<code class="language-plaintext highlighter-rouge">command</code>+鼠标单击 点击多行编辑（支持多行分别复制粘贴）
<img src="https://upload-images.jianshu.io/upload_images/4066843-87e17abf49152425.gif?imageMogr2/auto-orient/strip" alt="linesedit.gif" /></p>
    </blockquote>
  </li>
  <li>
    <p>为快速查看弹出窗口添加了导出选项，用于数据类型，例如NSData
<img src="https://upload-images.jianshu.io/upload_images/4066843-670d6ecfa885f9af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-09-19 上午11.04.52.png" /></p>
  </li>
  <li>
    <p>现在，新创建的<code class="language-plaintext highlighter-rouge">schemes</code>默认由Xcode项目的所有用户共享。要创建个人方案，请取消选中<code class="language-plaintext highlighter-rouge">Manage Schemes</code>表中的<code class="language-plaintext highlighter-rouge">Shared</code>复选框</p>
  </li>
  <li>
    <p>打开Library时按住Option键将使其在手动关闭之前保持可见，而不是在每次使用后自动关闭。(使用<code class="language-plaintext highlighter-rouge">command</code>+<code class="language-plaintext highlighter-rouge">shift</code>+<code class="language-plaintext highlighter-rouge">M</code>/<code class="language-plaintext highlighter-rouge">L</code>打开媒体库或UI组件库，拖去UI组件时按住Option壳使弹出视图不消失)
<img src="https://upload-images.jianshu.io/upload_images/4066843-6712f7fc0b0c1824.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-09-19 上午11.24.25.png" /></p>
  </li>
  <li>xcode的10增加了对C ++ 17个头部的支持<any>，<optional>和<variant>。（39271859）</variant></optional></any></li>
  <li>命名颜色现在可以象征性地引用系统颜色。（39196638）</li>
  <li>libstdc ++已在xcode10弃用，C ++项目现在必须迁移到libc++，开发人员还应审核项目依赖项，以删除对libstdc++的引用</li>
  <li>Libgcc已经过时了。Xcode 10无法再构建具有macOS 10.4和10.5部署目标的应用程序。（42818150,38035243）</li>
  <li>已删除对Subversion(SVN)的支持,目前只支持Git</li>
  <li>Xcode 10是最后一个支持Swift 3的版本。通过打开项目并选择Edit&gt; Convert&gt; To Current Swift Syntax …将项目从Swift 3代码迁移到Swift 4.2语法…（43101816）</li>
  <li>macOS 10.14 SDK不再包含对编译32位应用程序的支持。如果开发人员需要为i386编译，则需要Xcode 9.4或更早版本。</li>
  <li>调试工具增强
更多信息请阅读参考文档中的《Xcode 10 Release Notes》</li>
</ol>

<p>###XCode10已知BUG</p>
<ol>
  <li>打开存储在iCloud Drive中的Xcode项目和工作空间，或更改存储在iCloud Drive中的打开的工作空间或项目的源控制分支，可能会导致Xcode挂起。</li>
  <li>运行iOS 12的设备可能无法从Xcode的设备窗口获取请求的屏幕截图。（42873539）<br />
<strong>解决方法：</strong>在设备上截取屏幕截图。</li>
  <li>使用以前版本的Xcode构建的Xcode 10运行WatchKit应用程序可能会出现安装错误“WatchKit应用程序具有无效的存根可执行文件”。（40567857）<br />
<strong>解决方法：</strong>清理构建文件夹并再次运行应用程序。</li>
  <li>如果Xcode尚未连接完成任何开发设备，则Instruments可能无法启动。（43066159）<br />
<strong>解决方法：</strong>等待Xcode的设备设置阶段完成，然后打开Instruments。</li>
  <li>Instruments可能无法在iOS模拟器中配置库或框架单元测试</li>
  <li>在playground中切换到非默认工具链可能会导致Xcode崩溃。（43659135）<br />
<strong>解决方法：</strong>切换回默认工具链，然后打开playground。</li>
  <li>模拟设备中的macOS粘贴板和粘贴板之间的同步有时会失败。（36036706,38052949,41916640）</li>
  <li>操作系统可能需要几分钟才能在模拟器中首次启动。（40535421）</li>
  <li>Xcode不支持ed25519加密的SSH密钥对。（40912136）<br />
<strong>解决方法：</strong>使用使用不同加密形式的SSH密钥对。</li>
</ol>

<blockquote>
  <p>###参考文档
1.<a href="https://github.com/ole/whats-new-in-swift-4-2">whats-new-in-swift-4-2</a>
2.<a href="https://github.com/apple/swift/blob/master/CHANGELOG.md">swift change Log</a>
3.<a href="https://swift.org/blog/swift-4-2-released/">swift-4-2-released</a>
4.<a href="https://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes">Xcode 10 Release Notes</a></p>
</blockquote>]]></content><author><name>DKJone</name></author><category term="swift 4.2" /><category term="Xcode 10" /><category term="IOS" /><summary type="html"><![CDATA[简单介绍swift4.2更新内容并与swift3作对比，以及Xocde10的新功能和更新内容]]></summary></entry><entry><title type="html">swift语法糖</title><link href="http://0.0.0.0:4000/2018/07/17/swift%E8%AF%AD%E6%B3%95%E7%B3%96.html" rel="alternate" type="text/html" title="swift语法糖" /><published>2018-07-17T00:00:00+08:00</published><updated>2018-02-28T07:27:01+08:00</updated><id>http://0.0.0.0:4000/2018/07/17/swift%E8%AF%AD%E6%B3%95%E7%B3%96</id><content type="html" xml:base="http://0.0.0.0:4000/2018/07/17/swift%E8%AF%AD%E6%B3%95%E7%B3%96.html"><![CDATA[<h3 id="介绍">介绍:</h3>
<p>本文将记录一些特殊语法的使用方法，以及如何利用这些特殊语法给编程带来的方便,第一部分为语法记录，第二部分为编程技巧</p>

<h3 id="一语法记录">一、语法记录</h3>
<h4 id="11-集合index相关">1.1 集合index相关</h4>
<p><strong>全新的集合用collection.index标识集合中元素位置。Array.indices 为数组中所有index的集合</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">str2</span> <span class="o">=</span> <span class="s">"12345678"</span>
<span class="c1">// collections.count</span>
<span class="n">str2</span><span class="o">.</span><span class="n">count</span>                                  <span class="c1">// 8</span>
<span class="c1">// 获取集合中元素位置</span>
<span class="n">str2</span><span class="p">[</span><span class="n">str2</span><span class="o">.</span><span class="n">indices</span><span class="o">.</span><span class="n">first</span><span class="o">!</span><span class="p">]</span>                   <span class="c1">// "1"</span>
<span class="p">[</span><span class="mi">82</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">90</span><span class="p">]</span><span class="o">.</span><span class="n">indices</span>            <span class="c1">// 0..&lt;6</span>
<span class="k">for</span> <span class="n">a</span> <span class="k">in</span> <span class="n">str2</span><span class="o">.</span><span class="n">indices</span><span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">encodedOffset</span><span class="p">)</span>                  <span class="c1">// 0,1,2,3,4,5,6,7</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>String分割一般用 <code class="language-plaintext highlighter-rouge">..&lt;</code> 例：<code class="language-plaintext highlighter-rouge">string.startIndex..&lt;string.endInde</code></strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">str</span> <span class="o">=</span> <span class="s">"Hello, playground"</span>               
<span class="k">let</span> <span class="nv">range</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span><span class="o">..&lt;</span><span class="n">str</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span>
<span class="n">str</span><span class="p">[</span><span class="n">range</span><span class="p">]</span>                                  <span class="c1">// "Hello"</span>
</code></pre></div></div>
<p><strong>获取字符串内容字符串长度不确定，获取长度大于字符串长度时，返回整串，目标长度小于字符串长度返回截取的子串内容</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">length</span> <span class="o">=</span> <span class="mi">10</span>
<span class="k">var</span> <span class="nv">contentRange</span><span class="p">:</span><span class="kt">Range</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">.</span><span class="kt">Index</span><span class="o">&gt;</span>
<span class="k">if</span> <span class="k">let</span> <span class="nv">content</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="n">length</span><span class="p">,</span> <span class="nv">limitedBy</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">endIndex</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">contentRange</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span><span class="o">..&lt;</span><span class="n">str</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span><span class="p">{</span>
    <span class="n">contentRange</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span><span class="o">..&lt;</span><span class="n">str</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">endIndex</span><span class="p">,</span> <span class="nv">offsetBy</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="n">str</span><span class="p">[</span><span class="n">contentRange</span><span class="p">]</span>                        <span class="c1">// "Hello, pla"</span>
<span class="k">let</span> <span class="nv">a</span>  <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">str</span><span class="o">.</span><span class="n">startIndex</span><span class="o">..&lt;</span><span class="n">str</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="nv">after</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">startIndex</span><span class="p">)]</span> <span class="c1">//"H"</span>
</code></pre></div></div>

<h4 id="12-autoclosure自动闭包">1.2 @autoclosure（自动闭包）</h4>
<p><strong>自动闭包不接受任何参数，延迟求值，只有在被调用时才会返回被包装在其中的表达式的值。</strong><br />
 在我们调用函数A获取函数结果作为参数传递给另一个函数B时，无论这个结果在函数B中是否使用，函数A都会被执行，如下第二次调用<code class="language-plaintext highlighter-rouge">goodAfternoon(afternoon: false, who: getName())</code>方法后并没有使用getName的值但是函数<code class="language-plaintext highlighter-rouge">getName</code>还是执行了</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">getName</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="kd">#function</span><span class="p">)</span>
    <span class="k">return</span> <span class="s">"DKJone"</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">goodAfternoon</span><span class="p">(</span><span class="nv">afternoon</span><span class="p">:</span><span class="kt">Bool</span> <span class="p">,</span><span class="nv">who</span><span class="p">:</span><span class="kt">String</span><span class="p">){</span>
    <span class="k">if</span> <span class="n">afternoon</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Good afternoon, </span><span class="se">\(</span><span class="n">who</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"------goodAfternoon(afternoon: true, who: getName())-------"</span><span class="p">)</span>
<span class="nf">goodAfternoon</span><span class="p">(</span><span class="nv">afternoon</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">who</span><span class="p">:</span> <span class="nf">getName</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"------goodAfternoon(afternoon: false, who: getName())-------"</span><span class="p">)</span>
<span class="nf">goodAfternoon</span><span class="p">(</span><span class="nv">afternoon</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nv">who</span><span class="p">:</span> <span class="nf">getName</span><span class="p">())</span>
<span class="cm">/*log:
    ------goodAfternoon(afternoon: true, who: getName())-------
    getName()
    Good afternoon, DKJone
    ------goodAfternoon(afternoon: false, who: getName())-------
    getName()
*/</span>
</code></pre></div></div>
<p>当我们在第二个参数添加 <code class="language-plaintext highlighter-rouge">@autoclosure </code>关键字后，第二个参数中的代码会在函数执行时自动生成一个闭包，只有闭包真正执行时第二个参数种类代码才会调用所以下面的<code class="language-plaintext highlighter-rouge">goodMooning(morning: false, who: getName())</code>并没有调用<code class="language-plaintext highlighter-rouge">getName</code>方法</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//@autoclosure</span>
<span class="kd">func</span> <span class="nf">goodMooning</span><span class="p">(</span><span class="nv">morning</span><span class="p">:</span><span class="kt">Bool</span> <span class="p">,</span><span class="nv">who</span><span class="p">:</span><span class="kd">@autoclosure</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">){</span>
    <span class="k">if</span> <span class="n">morning</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Good morning, </span><span class="se">\(</span><span class="nf">who</span><span class="p">()</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"------goodMooning(morning: true, who: getName())-------"</span><span class="p">)</span>
<span class="nf">goodMooning</span><span class="p">(</span><span class="nv">morning</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">who</span><span class="p">:</span> <span class="nf">getName</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"------goodMooning(morning: false, who: getName())-------"</span><span class="p">)</span>
<span class="nf">goodMooning</span><span class="p">(</span><span class="nv">morning</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nv">who</span><span class="p">:</span> <span class="nf">getName</span><span class="p">())</span>
<span class="cm">/* log:
------goodMooning(morning: true, who: getName())-------
getName()
Good morning, DKJone
------goodMooning(morning: false, who: getName())-------
*/</span>
</code></pre></div></div>
<h4 id="13-sequencefirst-next-">1.3 sequence(first: next: )</h4>
<p>根据next里的闭包来生成下一个元素，和reduce完全相反。特别的是这个函数返回的是一个 <code class="language-plaintext highlighter-rouge">UnfoldSequence</code> ，即里面的值是<code class="language-plaintext highlighter-rouge">lazy</code>的，只要在访问时才生成，这也可能是一个无限的队列。</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="nf">sequence</span><span class="p">(</span><span class="nv">first</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span> <span class="nv">next</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">})</span><span class="o">.</span><span class="nf">prefix</span><span class="p">(</span><span class="nv">while</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="p">})</span> <span class="p">{</span>
    <span class="c1">// 0.1, 0.2, 0.4, 0.8, ...</span>
<span class="p">}</span>
</code></pre></div></div>
<p>似乎特别适合用来寻祖，当next闭包返回的是nil时队列就终止了：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">view</span> <span class="k">in</span> <span class="nf">sequence</span><span class="p">(</span><span class="nv">first</span><span class="p">:</span> <span class="n">someView</span><span class="p">,</span> <span class="nv">next</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">superview</span> <span class="p">})</span> <span class="p">{</span>
    <span class="c1">// someView, someView.superview, someView.superview.superview, ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="二编码的艺术">二、编码的艺术</h3>
<p><strong>2.1 数组中的每个元素乘以2</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="mi">7</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="nv">$0</span> <span class="o">*</span> <span class="mi">2</span><span class="p">}</span>
</code></pre></div></div>
<p><strong>2.2 数组中的元素求和/排序</strong>
在swift中<code class="language-plaintext highlighter-rouge">+-*/&gt;&lt;=</code>都是一个函数/闭包</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span>               <span class="c1">// 55</span>
        <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="o">&gt;</span> <span class="p">)</span>             <span class="c1">// [10,9,8,7,6, 5,4,3,2,1] </span>
</code></pre></div></div>

<p><strong>2.3 验证在字符串中是否存在指定单词</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">let</span> <span class="nv">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Swift"</span><span class="p">,</span><span class="s">"iOS"</span><span class="p">,</span><span class="s">"cocoa"</span><span class="p">,</span><span class="s">"OSX"</span><span class="p">,</span><span class="s">"tvOS"</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">tweet</span> <span class="o">=</span> <span class="s">"This is an example tweet larking about Swift"</span>

        <span class="k">let</span> <span class="nv">valid</span> <span class="o">=</span> <span class="o">!</span><span class="n">words</span><span class="o">.</span><span class="nf">filter</span><span class="p">({</span><span class="n">tweet</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="nv">$0</span><span class="p">)})</span><span class="o">.</span><span class="n">isEmpty</span>     <span class="c1">// false</span>
        <span class="c1">//或者</span>
        <span class="n">tweet</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">)</span>
            <span class="o">.</span><span class="kd">lazy</span>
            <span class="o">.</span><span class="nf">map</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="kd">init</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="nv">where</span><span class="p">:</span> <span class="kt">Set</span><span class="p">(</span><span class="n">words</span><span class="p">)</span><span class="o">.</span><span class="n">contains</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>2.4 一行代码输出生日歌</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">forEach</span><span class="p">{</span><span class="nf">print</span><span class="p">(</span><span class="s">"Happy Birthday "</span> <span class="o">+</span> <span class="p">((</span><span class="nv">$0</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">?</span> <span class="s">"dear Alice"</span><span class="p">:</span><span class="s">"to You"</span><span class="p">))}</span>
        <span class="cm">/*log:
                Happy Birthday to You
                Happy Birthday to You
                Happy Birthday dear uraimo
                Happy Birthday to You
        */</span>
</code></pre></div></div>

<p><strong>2.5 在数组中查找最小（或最大）值</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="c1">//Find the minimum of an array of Ints</span>
        <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">22</span><span class="p">,</span><span class="mi">753</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">137</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">279</span><span class="p">,</span><span class="mi">1034</span><span class="p">,</span><span class="mi">77</span><span class="p">]</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span><span class="o">.</span><span class="n">first</span>
        <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">22</span><span class="p">,</span><span class="mi">753</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">137</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">279</span><span class="p">,</span><span class="mi">1034</span><span class="p">,</span><span class="mi">77</span><span class="p">]</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="kt">Int</span><span class="o">.</span><span class="n">max</span><span class="p">,</span> <span class="n">min</span><span class="p">)</span>
        <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">22</span><span class="p">,</span><span class="mi">753</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">137</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">279</span><span class="p">,</span><span class="mi">1034</span><span class="p">,</span><span class="mi">77</span><span class="p">]</span><span class="o">.</span><span class="nf">min</span><span class="p">()</span>
        <span class="c1">//Find the maximum of an array of Ints</span>
        <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">22</span><span class="p">,</span><span class="mi">753</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">137</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">279</span><span class="p">,</span><span class="mi">1034</span><span class="p">,</span><span class="mi">77</span><span class="p">]</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span><span class="o">.</span><span class="n">last</span>
        <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">22</span><span class="p">,</span><span class="mi">753</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">137</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">279</span><span class="p">,</span><span class="mi">1034</span><span class="p">,</span><span class="mi">77</span><span class="p">]</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="kt">Int</span><span class="o">.</span><span class="n">min</span><span class="p">,</span> <span class="n">max</span><span class="p">)</span>
        <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">22</span><span class="p">,</span><span class="mi">753</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">137</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">279</span><span class="p">,</span><span class="mi">1034</span><span class="p">,</span><span class="mi">77</span><span class="p">]</span><span class="o">.</span><span class="nf">max</span><span class="p">()</span>
</code></pre></div></div>
<p><strong>2.6.过滤数组中的数字</strong>
*partition 会根据条件把集合里的元素重新排序，符合条件的元素移动到最后，返回一个两个部分分界元素的索引.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kd">extension</span> <span class="kt">Sequence</span><span class="p">{</span>
            <span class="c1">//typealias Element = Self.Iterator.Element</span>
            <span class="kd">func</span> <span class="nf">partitionBy</span><span class="p">(</span><span class="nv">fu</span><span class="p">:</span> <span class="p">(</span><span class="kt">Element</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">([</span><span class="kt">Element</span><span class="p">],[</span><span class="kt">Element</span><span class="p">]){</span>
                <span class="k">var</span> <span class="nv">first</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Element</span><span class="p">]()</span>
                <span class="k">var</span> <span class="nv">second</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Element</span><span class="p">]()</span>
                <span class="k">for</span> <span class="n">el</span> <span class="k">in</span> <span class="k">self</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="nf">fu</span><span class="p">(</span><span class="n">el</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">first</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">el</span><span class="p">)</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="n">second</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">el</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="nf">return</span> <span class="p">(</span><span class="n">first</span><span class="p">,</span><span class="n">second</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">let</span> <span class="nv">part</span> <span class="o">=</span> <span class="p">[</span><span class="mi">82</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">90</span><span class="p">]</span><span class="o">.</span><span class="n">partitionBy</span><span class="p">{</span><span class="nv">$0</span> <span class="o">&lt;</span> <span class="mi">60</span><span class="p">}</span>
        <span class="n">part</span> <span class="c1">// ([58, 49], [82, 76, 88, 90])</span>
        <span class="c1">//简写一</span>
        <span class="kd">extension</span> <span class="kt">Sequence</span><span class="p">{</span>
            <span class="kd">func</span> <span class="nf">anotherPartitionBy</span><span class="p">(</span><span class="nv">fu</span><span class="p">:</span> <span class="p">(</span><span class="k">Self</span><span class="o">.</span><span class="kt">Iterator</span><span class="o">.</span><span class="kt">Element</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">Bool</span><span class="p">)</span><span class="o">-&gt;</span><span class="p">([</span><span class="k">Self</span><span class="o">.</span><span class="kt">Iterator</span><span class="o">.</span><span class="kt">Element</span><span class="p">],[</span><span class="k">Self</span><span class="o">.</span><span class="kt">Iterator</span><span class="o">.</span><span class="kt">Element</span><span class="p">]){</span>
                <span class="nf">return</span> <span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">fu</span><span class="p">),</span><span class="k">self</span><span class="o">.</span><span class="nf">filter</span><span class="p">({</span><span class="o">!</span><span class="nf">fu</span><span class="p">(</span><span class="nv">$0</span><span class="p">)}))</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">let</span> <span class="nv">part2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">82</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">90</span><span class="p">]</span><span class="o">.</span><span class="n">anotherPartitionBy</span><span class="p">{</span><span class="nv">$0</span> <span class="o">&lt;</span> <span class="mi">60</span><span class="p">}</span>
        <span class="n">part2</span> <span class="c1">// ([58, 49], [82, 76, 88, 90])</span>
        <span class="c1">//实际应用版</span>
        <span class="k">var</span> <span class="nv">part3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">82</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">90</span><span class="p">]</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span> <span class="p">([],[]),</span> <span class="p">{</span>
            <span class="p">(</span><span class="nv">a</span><span class="p">:([</span><span class="kt">Int</span><span class="p">],[</span><span class="kt">Int</span><span class="p">]),</span><span class="nv">n</span><span class="p">:</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">([</span><span class="kt">Int</span><span class="p">],[</span><span class="kt">Int</span><span class="p">])</span> <span class="nf">in</span>
            <span class="p">(</span><span class="n">n</span><span class="o">&lt;</span><span class="mi">60</span><span class="p">)</span> <span class="p">?</span> <span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="mi">0</span><span class="o">+</span><span class="p">[</span><span class="n">n</span><span class="p">],</span><span class="n">a</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span> <span class="p">:</span> <span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span><span class="n">a</span><span class="o">.</span><span class="mi">1</span><span class="o">+</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
        <span class="p">})</span>
        <span class="n">part3</span> <span class="c1">// ([58, 49], [82, 76, 88, 90])</span>
</code></pre></div></div>
<p><strong>2.7 通过解构元组交换</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">var</span> <span class="nv">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="mi">2</span>
        <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
        <span class="s">"a=</span><span class="se">\(</span><span class="n">a</span><span class="se">)</span><span class="s">,b=</span><span class="se">\(</span><span class="n">b</span><span class="se">)</span><span class="s">"</span>   <span class="c1">// "a=2,b=1"</span>
</code></pre></div></div>
<p><strong>2.8 正则表达式</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">String</span><span class="p">{</span>
    <span class="c1">/// 移除小数点后结尾多余0和小数点</span>
    <span class="kd">public</span> <span class="k">var</span> <span class="nv">removeEndZero</span><span class="p">:</span><span class="kt">String</span><span class="p">{</span>
        <span class="k">return</span> <span class="nf">replacingOccurrences</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"[.]?[0]*$"</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="s">""</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">regularExpression</span><span class="p">,</span><span class="o">.</span><span class="n">caseInsensitive</span><span class="p">])</span>
    <span class="p">}</span>
    <span class="c1">/// 移除电话号码开头的 +086、086、86、+86</span>
    <span class="kd">public</span> <span class="k">var</span> <span class="nv">remove086Phone</span><span class="p">:</span><span class="kt">String</span><span class="p">{</span>
        <span class="k">return</span> <span class="nf">replacingOccurrences</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="s">"^[+]?[0]?86"</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="s">""</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">regularExpression</span><span class="p">,</span><span class="o">.</span><span class="n">caseInsensitive</span><span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>2.9.限制输入数字字符</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">textView</span><span class="p">(</span><span class="n">_</span> <span class="nv">textView</span><span class="p">:</span> <span class="kt">UITextView</span><span class="p">,</span> <span class="n">shouldChangeTextIn</span> <span class="nv">range</span><span class="p">:</span> <span class="kt">NSRange</span><span class="p">,</span> <span class="n">replacementText</span> <span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">text</span> <span class="o">==</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">{</span>
        <span class="n">textView</span><span class="o">.</span><span class="nf">resignFirstResponder</span><span class="p">()</span>
        <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
        <span class="k">return</span> <span class="kt">NSPredicate</span><span class="p">(</span><span class="nv">format</span><span class="p">:</span> <span class="s">"SELF MATCHES %@"</span><span class="p">,</span> <span class="nv">argumentArray</span><span class="p">:</span> <span class="p">[</span><span class="s">"[</span><span class="se">\\</span><span class="s">d]?[</span><span class="se">\\</span><span class="s">cx]?"</span><span class="p">])</span><span class="o">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">text</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>2.10 读取一个文件</strong></p>

<p>和其他语言不同，Swift 不能使用内建的函数读取文件，并把每一行存放到数组中。不过我们可以结合 <code class="language-plaintext highlighter-rouge">split</code> 和 <code class="language-plaintext highlighter-rouge">map</code> 方法写一段简短的代码，这样就无需使用 for 循环：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">path</span><span class="p">(</span><span class="nv">forResource</span><span class="p">:</span> <span class="s">"test"</span><span class="p">,</span> <span class="nv">ofType</span><span class="p">:</span> <span class="s">"txt"</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">lines</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="kt">String</span><span class="p">(</span><span class="nv">contentsOfFile</span><span class="p">:</span> <span class="n">path</span><span class="o">!</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">{</span><span class="nv">$0</span> <span class="o">==</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">}</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="kd">init</span><span class="p">)</span>
<span class="k">if</span> <span class="k">let</span> <span class="nv">lines</span><span class="o">=</span><span class="n">lines</span> <span class="p">{</span>
    <span class="n">lines</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">// aaaaa</span>
    <span class="n">lines</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c1">// bbbbb</span>
    <span class="n">lines</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c1">// ccccc</span>
    <span class="n">lines</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="c1">// ddddd</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>DKJone</name></author><category term="swift" /><category term="语法糖" /><category term="编程技巧" /><summary type="html"><![CDATA[本文将记录一些特殊语法的使用方法，以及如何利用这些特殊语法给编程带来的方便]]></summary></entry><entry><title type="html">新年第一文</title><link href="http://0.0.0.0:4000/2018/02/10/%E6%96%B0%E5%B9%B4%E7%AC%AC%E4%B8%80%E6%96%87.html" rel="alternate" type="text/html" title="新年第一文" /><published>2018-02-10T00:00:00+08:00</published><updated>2018-01-01T23:27:01+08:00</updated><id>http://0.0.0.0:4000/2018/02/10/%E6%96%B0%E5%B9%B4%E7%AC%AC%E4%B8%80%E6%96%87</id><content type="html" xml:base="http://0.0.0.0:4000/2018/02/10/%E6%96%B0%E5%B9%B4%E7%AC%AC%E4%B8%80%E6%96%87.html"><![CDATA[<h5 id="新的一年快到了能在这个时候写写代码的人差不多都是真爱刚刚在github给一个过千star的项目提了个issue正好作者也在逛github于是聊了几句一个开源项目最初的开发可能只是一个临时的想法但要坚持实属不易你的项目关注的越多issue就会越多国内很少有团队或者开发者能保证项目在被关注很多后仍然能够耐心解决大家提的issue的因为无论是和项目有关或者无关的问题在那时都会被提到你的项目下想要一一解决很困难比如xmartlabs旗下的eureka和xlform虽然两者的star都是超5k的但是issue数量常年在100以上而rxswift和promisekit这两个库star数量是前面两个的两倍而未解决issue的数量却不足他们的十分之一开源工作是一项吃力不讨好的事情但是那些热爱着各行业的人仍然乐意将自己的代码无私的分享给大家">新的一年快到了，能在这个时候写写代码的人差不多都是真爱。刚刚在GitHub给一个过千star的项目提了个issue，正好作者也在逛GitHub于是聊了几句。一个开源项目最初的开发可能只是一个临时的想法，但要坚持实属不易。你的项目关注的越多issue就会越多，国内很少有团队或者开发者能保证项目在被关注很多后仍然能够耐心解决大家提的issue的。因为无论是和项目有关或者无关的问题在那时都会被提到你的项目下。想要一一解决很困难，比如xmartlabs旗下的<code class="language-plaintext highlighter-rouge">Eureka</code>和<code class="language-plaintext highlighter-rouge">XLForm</code>虽然两者的star都是超5K的但是issue数量常年在100以上。而<code class="language-plaintext highlighter-rouge">RxSwift</code>和<code class="language-plaintext highlighter-rouge">PromiseKit</code>这两个库star数量是前面两个的两倍而未解决issue的数量却不足他们的十分之一。开源工作，是一项吃力不讨好的事情。但是那些热爱着各行业的人仍然乐意将自己的代码无私的分享给大家。</h5>
<h5 id="这两年我从一名看别人教学视频的菜鸟到使用百度解决基本的问题再到能够在stack-overflow上查找问题或者回答问题最后到能够在github上直接向第三方库的作者提出问题参考优秀的开源代码实现自己的开源项目我的成长离不开github和众多的开源工作者们">这两年我从一名看别人教学视频的菜鸟，到使用百度解决基本的问题，再到能够在Stack Overflow上查找问题或者回答问题，最后到能够在GitHub上直接向第三方库的作者提出问题，参考优秀的开源代码，实现自己的开源项目。我的成长离不开GitHub和众多的开源工作者们。</h5>
<h5 id="从github众多项目的issue中我经常能看到不同的思考问题的方法我会尝试着去验证这些奇特的想法从去年中旬开始研究ios逆向开发一个很有意思的研究方向常常会带给我们不同的喜悦当一个人的专业知识越来越多的时候思想的束缚也会越来越多当我们跟随着苹果的步伐一步步前行的时候我们失去了很多重要的东西从coc转到了swift我们的编程思想发生了转变切换成更加时尚的面向协议的编程苹果的视图使用swift的众多语法糖让开发者们相信这是一个更加有趣高效安全的编程方式但是又回到了那个最基础的问题我能做什么在接触ios逆向编程以后打开了一扇向世界的大门我们学到的越来越多的专业技能不应该成为我们思想上的枷锁而已改称为我们想要实现想的目标的工具在逆向开发中许多以前不可能实现的事情被一一实现因为你的对手都是这个领域里最顶尖的高手而我们要做的就是理解这些人编程的想法并且找到他们变成过程中的漏洞然后利用这些实现自己想要实现的功能full-of-challengesfull-of-happiness">从GitHub众多项目的issue中，我经常能看到不同的思考问题的方法。我会尝试着去验证这些奇特的想法。从去年中旬开始研究iOS逆向开发，一个很有意思的研究方向。常常会带给我们不同的喜悦。当一个人的专业知识越来越多的时候，思想的束缚也会越来越多，当我们跟随着苹果的步伐一步步前行的时候我们失去了很多重要的东西，从C/OC转到了swift我们的编程思想发生了转变切换成更加时尚的面向协议的编程。苹果的视图使用swift的众多语法糖让开发者们相信这是一个更加有趣、高效、安全的编程方式，但是又回到了那个最基础的问题。我能做什么？在接触iOS逆向编程以后打开了一扇向世界的大门，我们学到的越来越多的专业技能不应该成为我们思想上的枷锁，而已改称为我们想要实现想的目标的工具。在逆向开发中许多以前不可能实现的事情被一一实现，因为你的对手都是这个领域里最顶尖的高手，而我们要做的就是理解这些人编程的想法，并且找到他们变成过程中的漏洞，然后利用这些实现自己想要实现的功能。Full of challenges，full of happiness.</h5>
<h5 id="hook微信已经有一段时间了从最初参考几个越狱项目开发这套有很多缺陷的非越狱版本到现在一步步完善最近加入了后台持续运行的开关但是加入后连30s内的消息都没推送去通知了准备接下来解决一下推送问题并且针对微信在打开应用时向微信发送了验证客户端的一些操作做了一些设想准备在这些安全监测机制上做写文章绕过客户端的监测进一步避免被封号">hook微信已经有一段时间了，从最初参考几个越狱项目开发这套有很多缺陷的非越狱版本，到现在一步步完善，最近加入了后台持续运行的开关，但是加入后连30s内的消息都没推送去通知了。准备接下来解决一下推送问题，并且针对微信在打开应用时向微信发送了验证客户端的一些操作做了一些设想，准备在这些安全监测机制上做写文章，绕过客户端的监测，进一步避免被封号。</h5>]]></content><author><name>DKJone</name></author><category term="开源" /><category term="微信" /><summary type="html"><![CDATA[新年有感]]></summary></entry><entry><title type="html">DKLoginButton</title><link href="http://0.0.0.0:4000/2018/01/01/DKLoginButton.html" rel="alternate" type="text/html" title="DKLoginButton" /><published>2018-01-01T00:00:00+08:00</published><updated>2018-01-03T22:00:01+08:00</updated><id>http://0.0.0.0:4000/2018/01/01/DKLoginButton</id><content type="html" xml:base="http://0.0.0.0:4000/2018/01/01/DKLoginButton.html"><![CDATA[<h1 id="dkloginbutton">DKLoginButton</h1>
<p>English|<a href="https://github.com/DKJone/DKLoginButton/blob/master/README_cn.md">中文文档</a> <br />
A login button with Cool animation and easy to use</p>

<p><a href="https://developer.apple.com/iphone/index.action"><img src="http://img.shields.io/badge/platform-ios-blue.svg?style=flat" alt="Platform" /></a>
<a href="https://developer.apple.com/swift"><img src="http://img.shields.io/badge/language-swift-brightgreen.svg?style=flat" alt="Language" /></a>
<a href="http://mit-license.org"><img src="http://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat" alt="License" /></a>
<a href=""><img src="https://img.shields.io/cocoapods/v/TKSubmitTransition.svg" alt="CocoaPods" /></a></p>

<h1 id="version">Version</h1>
<p><strong>Swift4.0</strong><br />
<a href="https://github.com/DKJone/DKLoginButton/tree/swift3.2">Swift3.2</a><br />
<a href="https://github.com/DKJone/DKLoginButton/tree/swift2.0">Swift2.0</a></p>

<p>Inspiration from <a href="https://dribbble.com/shots/1945593-Login-Home-Screen">Dribbble</a></p>

<p>A login button with animation effect is implemented in this project, which is commonly used for <strong>Login/Logoff</strong> and other operations</p>

<p>As you can see the GIF animated demo below, you can set the button to a specific state after the effect is rotated (failure and success correspond to different animations)</p>

<p>These effects are encapsulated in the same class and can be easily used as long as the button inherits from this class</p>

<h1 id="demo">Demo</h1>
<p><img src="https://d13yacurqjgara.cloudfront.net/users/62319/screenshots/1945593/shot.gif" alt="Demo GIF Animation" title="Demo GIF Animation" /></p>

<p><img src="https://raw.githubusercontent.com/wwdc14/TKSubmitTransitionObjective-C/master/Demo.gif" alt="image" /></p>
<h1 id="cocoapods-recommended">CocoaPods Recommended</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod 'DKLoginButton'
</code></pre></div></div>

<h1 id="file-add">File add</h1>
<p>Just download the Demo and drag the <code class="language-plaintext highlighter-rouge">DKButton </code> folder into your project</p>

<h1 id="usage">Usage</h1>

<h2 id="this-is-a-subclass-of-the-uibutton--that-initializes-and-sets-the-related-properties-before-using">This is a subclass of the UIButton  that initializes and sets the related properties before using</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
	<span class="c1">// set backgrounds</span>
	<span class="kt">UIApplication</span><span class="o">.</span><span class="nf">sharedApplication</span><span class="p">()</span><span class="o">.</span><span class="nf">setStatusBarStyle</span><span class="p">(</span><span class="o">.</span><span class="kt">LightContent</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
	<span class="k">let</span> <span class="nv">bg</span> <span class="o">=</span> <span class="kt">UIImageView</span><span class="p">(</span><span class="nv">image</span><span class="p">:</span> <span class="kt">UIImage</span><span class="p">(</span><span class="nv">named</span><span class="p">:</span> <span class="s">"Login"</span><span class="p">))</span>
	<span class="n">bg</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">frame</span>
	<span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">bg</span><span class="p">)</span>
	<span class="c1">// init button</span>
	<span class="k">var</span> <span class="nv">btn</span> <span class="o">=</span> <span class="kt">DKTransitionButton</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">64</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">44</span><span class="p">))</span>
	<span class="n">btn</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">red</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">green</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">blue</span><span class="p">:</span> <span class="mf">128.0</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span> <span class="nv">alpha</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
	<span class="n">btn</span><span class="o">.</span><span class="n">center</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">center</span>
	<span class="n">btn</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">bottom</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">60</span>
	<span class="n">btn</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"Sign in"</span><span class="p">,</span> <span class="nv">forState</span><span class="p">:</span> <span class="o">.</span><span class="kt">Normal</span><span class="p">)</span>
	<span class="n">btn</span><span class="o">.</span><span class="n">titleLabel</span><span class="p">?</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"HelveticaNeue-Light"</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">14</span><span class="p">)</span>
	<span class="n">btn</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="kd">#selector(</span><span class="nf">onTapButton(_:)</span><span class="kd">)</span><span class="p">,</span> <span class="nv">forControlEvents</span><span class="p">:</span> <span class="kt">UIControlEvents</span><span class="o">.</span><span class="kt">TouchUpInside</span><span class="p">)</span>
	<span class="n">btn</span><span class="o">.</span><span class="n">spiner</span><span class="o">.</span><span class="n">spinnerColor</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="o">.</span><span class="nf">blackColor</span><span class="p">()</span>
	<span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">btn</span><span class="p">)</span>
	<span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">bringSubviewToFront</span><span class="p">(</span><span class="n">canlogin</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="how-to-use-animations">How to use animations</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">onTapButton</span><span class="p">(</span><span class="nv">button</span><span class="p">:</span> <span class="kt">DKTransitionButton</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// Start loading animations</span>
	<span class="n">button</span><span class="o">.</span><span class="nf">startLoadingAnimation</span><span class="p">()</span>

	<span class="k">if</span> <span class="k">self</span><span class="o">.</span><span class="n">canlogin</span><span class="o">.</span><span class="n">on</span> <span class="p">{</span>
	    <span class="c1">// Success, interface switch</span>
	<span class="n">button</span><span class="o">.</span><span class="nf">startSwitchAnimation</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
	<span class="k">let</span> <span class="nv">secondVC</span> <span class="o">=</span> <span class="kt">UIStoryboard</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Main"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span><span class="o">.</span><span class="nf">instantiateViewControllerWithIdentifier</span><span class="p">(</span><span class="s">"SecondViewController"</span><span class="p">)</span>
	<span class="n">secondVC</span><span class="o">.</span><span class="n">transitioningDelegate</span> <span class="o">=</span> <span class="k">self</span>
	<span class="k">self</span><span class="o">.</span><span class="nf">presentViewControllerWithDKAnimation</span><span class="p">(</span><span class="n">secondVC</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
	<span class="p">})</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    	<span class="c1">// Failed, returned and prompted</span>
	    <span class="n">button</span><span class="o">.</span><span class="nf">startShakeAnimation</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="p">{</span>
	    <span class="c1">// Prompt for logon failure</span>
	    <span class="nf">print</span><span class="p">(</span><span class="s">"badend"</span><span class="p">)</span>
	    <span class="p">})</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="the-animation-return-to-the-loginpage">The animation Return to the loginPage</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">onTapScreen</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">button</span><span class="o">.</span><span class="nf">moveToCenterExpand</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	    <span class="k">self</span><span class="o">.</span><span class="nf">dismissViewControllerAnimated</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>DKJone</name></author><category term="login" /><category term="button" /><summary type="html"><![CDATA[A login button with Cool animation and easy to use]]></summary></entry><entry><title type="html">IOS开发中常见不规范代码</title><link href="http://0.0.0.0:4000/2017/10/13/IOS%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E4%B8%8D%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81.html" rel="alternate" type="text/html" title="IOS开发中常见不规范代码" /><published>2017-10-13T00:00:00+08:00</published><updated>2017-10-13T23:27:01+08:00</updated><id>http://0.0.0.0:4000/2017/10/13/IOS%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E4%B8%8D%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81</id><content type="html" xml:base="http://0.0.0.0:4000/2017/10/13/IOS%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E4%B8%8D%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81.html"><![CDATA[<h1 id="ios开发中常见不规范代码">IOS开发中常见不规范代码</h1>
<p>更加详细的内容会同步更新在GitHub项目<a href="https://github.com/DKJone/ios-Tips">ios-Tips</a>中</p>

<h1 id="容易让人误解的代码">容易让人误解的代码</h1>
<h5 id="1-自动类型推导的代码">1. 自动类型推导的代码</h5>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">12.1</span> <span class="p">??</span> <span class="mi">0</span>  <span class="o">-</span> <span class="mi">1</span> <span class="p">??</span> <span class="mi">0</span>      <span class="c1">//12.1</span>
<span class="c1">//12.1 ?? (0 - 1 )?? 0</span>

</code></pre></div></div>
<p>结果容易被误解为是11.1，由于算数预算副优先级高于三目运算符所以正确的结果是<code class="language-plaintext highlighter-rouge">12.1 ?? (0 - 1 )?? 0</code></p>

<h1 id="容易忽略的错误代码">容易忽略的错误代码</h1>

<h5 id="1-日期格式yyyy-mm-dd与yyyy-mm-dd">1. 日期格式YYYY-MM-dd与yyyy-MM-DD</h5>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">formatter</span> <span class="o">=</span> <span class="kt">DateFormatter</span><span class="p">()</span>
<span class="n">formatter</span><span class="o">.</span><span class="n">dateFormat</span> <span class="o">=</span> <span class="s">"yyyy-MM-dd"</span>
<span class="k">let</span> <span class="nv">st</span> <span class="o">=</span> <span class="n">formatter</span><span class="o">.</span><span class="nf">date</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="s">"2017-12-31"</span><span class="p">)</span><span class="c1">//2017-12-31</span>
<span class="n">formatter</span><span class="o">.</span><span class="n">dateFormat</span> <span class="o">=</span> <span class="s">"YYYY-MM-dd"</span>
<span class="n">formatter</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">st</span><span class="o">!</span><span class="p">)</span><span class="c1">//2018-12-31</span>
</code></pre></div></div>
<p>产生错误的原因：</p>
<blockquote>
  <p>在IOS中YYYY根据周数来判断是哪一年而2017-12-31是周日算到2018年的第一周中所以产生了错误</p>
</blockquote>]]></content><author><name>DKJone</name></author><category term="不规范代码" /><category term="让人误解的代码" /><summary type="html"><![CDATA[IOS开发中常见不规范代码包括容易让人产生误解的代码和容易被忽略的错误代码]]></summary></entry><entry><title type="html">swift代码优化</title><link href="http://0.0.0.0:4000/2017/10/13/swift%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96.html" rel="alternate" type="text/html" title="swift代码优化" /><published>2017-10-13T00:00:00+08:00</published><updated>2017-10-13T23:27:01+08:00</updated><id>http://0.0.0.0:4000/2017/10/13/swift%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96</id><content type="html" xml:base="http://0.0.0.0:4000/2017/10/13/swift%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96.html"><![CDATA[<h1 id="swift代码优化">swift代码优化</h1>
<p>更加详细的内容会同步更新在GitHub项目<a href="https://github.com/DKJone/ios-Tips">ios-Tips</a>中</p>

<h1 id="影响编译速度的代码">影响编译速度的代码</h1>
<blockquote>
  <p>测试编译速度可已使用该<a href="https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode">工具</a></p>
</blockquote>

<h5 id="1自动类型推导的代码">1.自动类型推导的代码</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">model</span> <span class="p">:</span> <span class="kt">UILabel</span><span class="p">?</span>
<span class="k">var</span> <span class="nv">cat</span> <span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
<span class="k">var</span> <span class="nv">name</span> <span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
<span class="k">var</span> <span class="nv">number</span> <span class="p">:</span> <span class="kt">Int</span><span class="p">?</span>

<span class="c1">//build time : 8740.3ms</span>
<span class="kd">func</span> <span class="nf">sendData</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">parameter</span> <span class="o">=</span> <span class="p">[</span><span class="s">"model"</span> <span class="p">:</span> <span class="n">model</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span>
                     <span class="s">"cat"</span> <span class="p">:</span> <span class="n">cat</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span>
                     <span class="s">"name"</span> <span class="p">:</span> <span class="n">name</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span>
                     <span class="s">"number"</span> <span class="p">:</span> <span class="n">number</span> <span class="p">??</span> <span class="mi">0</span><span class="p">,</span>
                     <span class="s">"dog"</span> <span class="p">:</span> <span class="s">"dog"</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"send request with parameter:</span><span class="se">\(</span><span class="n">parameter</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//build time: 3235.4ms</span>
<span class="k">let</span> <span class="nv">parameter</span> <span class="p">:</span> <span class="p">[</span><span class="kt">String</span> <span class="p">:</span> <span class="kt">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">"model"</span> <span class="p">:</span> <span class="n">model</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span>
                               <span class="s">"cat"</span> <span class="p">:</span> <span class="n">cat</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span>
                               <span class="s">"name"</span> <span class="p">:</span> <span class="n">name</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span>
                               <span class="s">"number"</span> <span class="p">:</span> <span class="n">number</span> <span class="p">??</span> <span class="mi">0</span><span class="p">,</span>
                               <span class="s">"dog"</span> <span class="p">:</span> <span class="s">"dog"</span><span class="p">]</span>
</code></pre></div></div>

<h5 id="2any-或-anyobjec-any">2.Any 或 AnyObjec 、any?</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//build time: 200.3ms</span>
<span class="k">let</span> <span class="nv">parameter</span> <span class="p">:</span> <span class="p">[</span><span class="kt">String</span> <span class="p">:</span> <span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">"model"</span> <span class="p">:</span> <span class="n">model</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span>
                    <span class="s">"cat"</span> <span class="p">:</span> <span class="n">cat</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span>
                    <span class="s">"name"</span> <span class="p">:</span> <span class="n">name</span> <span class="p">??</span> <span class="s">""</span><span class="p">,</span>
                    <span class="s">"number"</span> <span class="p">:</span> <span class="s">"</span><span class="se">\(</span><span class="n">number</span> <span class="p">??</span> <span class="mi">0</span><span class="se">)</span><span class="s">"</span><span class="p">,</span>
                    <span class="s">"dog"</span> <span class="p">:</span> <span class="s">"dog"</span><span class="p">]</span>
</code></pre></div></div>
<h5 id="3运算时使用可选值">3.运算时使用可选值</h5>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//build time : 9804ms</span>
<span class="kd">func</span> <span class="nf">calculateSize</span><span class="p">(</span><span class="nv">view</span> <span class="p">:</span> <span class="kt">UIView</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">CGSize</span><span class="p">{</span>
    <span class="k">return</span> <span class="kt">CGSize</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">10</span> <span class="o">+</span> <span class="p">(</span><span class="n">view</span><span class="p">?</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="p">??</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">view</span><span class="p">?</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">height</span> <span class="p">??</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">22</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//build time : 172ms</span>
<span class="kd">func</span> <span class="nf">calculateSize</span><span class="p">(</span><span class="nv">view</span> <span class="p">:</span> <span class="kt">UIView</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">CGSize</span><span class="p">{</span>
    <span class="k">let</span> <span class="nv">width</span> <span class="o">=</span> <span class="n">view</span><span class="p">?</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="p">??</span> <span class="mi">0</span>
    <span class="k">let</span> <span class="nv">height</span> <span class="o">=</span> <span class="n">view</span><span class="p">?</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">height</span> <span class="p">??</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="kt">CGSize</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">width</span> <span class="o">+</span> <span class="n">height</span> <span class="o">+</span> <span class="mi">22</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="4-三目运算符bool--a--b">4. 三目运算符<code class="language-plaintext highlighter-rouge">(Bool ? a : b)</code></h5>
<h5 id="5-集合运算使用或">5. 集合运算使用+或+=</h5>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//build time 1400.6ms</span>
<span class="kd">func</span> <span class="nf">arrPlusOperatos</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
    <span class="k">let</span> <span class="nv">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
    <span class="n">result</span> <span class="o">+=</span> <span class="n">arr1</span> <span class="o">+</span> <span class="n">arr2</span> <span class="o">+</span> <span class="p">[</span><span class="mi">10</span><span class="p">]</span>
<span class="p">}</span>
<span class="c1">//build time 8.6ms</span>
<span class="kd">func</span> <span class="nf">arrPlusOperatos</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
    <span class="k">let</span> <span class="nv">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
    <span class="n">result</span><span class="o">.</span><span class="nf">appendContentsOf</span><span class="p">(</span><span class="n">arr1</span><span class="p">)</span>
    <span class="n">result</span><span class="o">.</span><span class="nf">appendContentsOf</span><span class="p">(</span><span class="n">arr2</span><span class="p">)</span>
    <span class="n">result</span><span class="o">.</span><span class="nf">appendContentsOf</span><span class="p">([</span><span class="mi">10</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div></div>
<h5 id="6-string-合并使用-">6. String 合并使用 +</h5>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//build time 79.4ms</span>
<span class="kd">func</span> <span class="nf">strPlusOperatos</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">str1</span> <span class="o">=</span> <span class="s">"1234567890"</span>
    <span class="k">let</span> <span class="nv">str2</span> <span class="o">=</span> <span class="s">"ABCDEFGHIJK"</span>
    <span class="n">result</span> <span class="o">+=</span> <span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span> <span class="o">+</span> <span class="s">"hello world"</span>
<span class="p">}</span>
<span class="c1">//build time 6ms</span>
<span class="kd">func</span> <span class="nf">strPlusOperatos</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">str1</span> <span class="o">=</span> <span class="s">"1234567890"</span>
    <span class="k">let</span> <span class="nv">str2</span> <span class="o">=</span> <span class="s">"ABCDEFGHIJK"</span>
    <span class="n">result</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">str1</span><span class="se">)\(</span><span class="n">str2</span><span class="se">)</span><span class="s">hello world"</span>
<span class="p">}</span>
</code></pre></div></div>
<h5 id="7-模块化代码使用私有cocoapods-repository-让不同模块以framework或则a文件的形式在项目里使用如此每次编译的时候就只需要编译自己模块下的代码其他模块的代码将会被编译后缓存不需要重复编译">7. 模块化代码，使用私有Cocoapods repository. 让不同模块以Framework或则.a文件的形式在项目里使用。如此每次编译的时候就只需要编译自己模块下的代码。其他模块的代码将会被编译后缓存，不需要重复编译</h5>]]></content><author><name>DKJone</name></author><category term="代码优化" /><category term="swift" /><summary type="html"><![CDATA[swift代码优化，提高编译速度]]></summary></entry><entry><title type="html">xcode常见错误处理</title><link href="http://0.0.0.0:4000/2017/10/13/xcode%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html" rel="alternate" type="text/html" title="xcode常见错误处理" /><published>2017-10-13T00:00:00+08:00</published><updated>2017-10-13T23:27:01+08:00</updated><id>http://0.0.0.0:4000/2017/10/13/xcode%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86</id><content type="html" xml:base="http://0.0.0.0:4000/2017/10/13/xcode%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html"><![CDATA[<h1 id="xcode常见错误处理">xcode常见错误处理</h1>
<p>更加详细的内容会同步更新在GitHub项目<a href="https://github.com/DKJone/ios-Tips">ios-Tips</a>中</p>

<h1 id="xcode-在ocswift混编时报错错误内容">Xcode 在OC、swift混编时报错错误内容</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>missing required module 'CommonCrypto'
</code></pre></div></div>
<h4 id="出错原因">出错原因：</h4>
<p>`
由于苹果的C语言库在swift中没有对应的framework，所以OC框架在使用c语言库后作为外部框架导入后找不到原c语言框架
`</p>
<h4 id="解决方法">解决方法</h4>
<p>`
新建对应的虚拟Framework（在此使用脚本自动生成模块并映射正确的Xcode/SDK路径），然后加入到项目依赖中，护体方法如下
`</p>
<ol>
  <li>选择xcode工程文件</li>
  <li>选择<code class="language-plaintext highlighter-rouge">info</code>选项</li>
  <li>添加<code class="language-plaintext highlighter-rouge">target</code>-&gt;<code class="language-plaintext highlighter-rouge">Aggregate</code></li>
  <li>添加Script将如下脚本粘贴到图示处
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BUILT_PRODUCTS_DIR</span><span class="k">}</span><span class="s2">/CommonCryptoModuleMap"</span>
<span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt; "</span><span class="k">${</span><span class="nv">BUILT_PRODUCTS_DIR</span><span class="k">}</span><span class="sh">/CommonCryptoModuleMap/module.modulemap"
module CommonCrypto [system] {
 header "</span><span class="k">${</span><span class="nv">SDKROOT</span><span class="k">}</span><span class="sh">/usr/include/CommonCrypto/CommonCrypto.h"
 export *
}
</span><span class="no">EOF
</span></code></pre></div>    </div>
  </li>
  <li>选择<code class="language-plaintext highlighter-rouge">Build Phases</code>选项，将CommonCrypto框架添加到<code class="language-plaintext highlighter-rouge">Target Dependencies</code><br />
<img src="https://github.com/DKJone/ios-Tips/tree/master/images/img_01.png" alt="image" />
<img src="https://github.com/DKJone/ios-Tips/tree/master/images/img_02.png" alt="image" /></li>
</ol>

<h1 id="blydatamanager错误导致app在发布后ios93一下系统异常崩溃">BLYDataManager错误导致app在发布后IOS9.3一下系统异常崩溃</h1>

<p>ios ipa测试时没任何问题但是上传AppStore后会在iOS 9上出现崩溃
下面是腾讯bugly给的崩溃信息</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">BLYDataManager</span> <span class="nf">persistData</span><span class="p">:</span><span class="nf">ofType</span><span class="p">:</span><span class="n">enableNotifications</span><span class="o">:</span><span class="n">withCompletionBlock</span><span class="o">:</span><span class="p">]</span><span class="n">_block_invoke</span>
<span class="n">EXC_BAD_ACCESS</span>

</code></pre></div></div>
<h4 id="出错原因-1">出错原因：</h4>
<blockquote>
  <h3 id="在xcode8中如果你的图片资源文件里有16位图或者图片显示模式为p3并且deployment-target是ios93以下的就会出现这个问题话说我公司的项目里面就出现了一个小按钮导致了这次崩溃不知道设计师是怎么弄出来的这个特殊图片如果你的app需要支持wide-color-functionality那你就必须设置deployment-target为ios93以上如果你的app不需要支持wide-color-functionality并且你希望兼容ios老版本那么你需要将所有16-bit-or-p3-assets的图片转换为8-bit-srgb-assets">在Xcode8中，如果你的图片资源文件里有16位图或者图片显示模式为P3，并且Deployment Target是iOS9.3以下的就会出现这个问题。（话说我公司的项目里面就出现了一个小按钮，导致了这次崩溃，不知道设计师是怎么弄出来的这个特殊图片…）如果你的App需要支持wide color functionality，那你就必须设置Deployment Target为iOS9.3以上。如果你的APP不需要支持wide color functionality并且你希望兼容iOS老版本，那么你需要将所有16-bit or P3 assets的图片转换为8-bit sRGB assets</h3>
</blockquote>

<h4 id="解决方法-1">解决方法</h4>
<ol>
  <li>打一个ipa包，解压你的应用的ipa包，进入到你应用的Playload文件夹。</li>
  <li>用find命令定位到Assets.car文件
find . -name ‘Assets.car’</li>
  <li>使用 assetutil 命令导出图片的信息存储到Assets.json文件中
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>xcrun <span class="nt">--sdk</span> iphoneos assetutil <span class="nt">--info</span> <span class="o">{</span>Assets.car路径<span class="o">}</span> <span class="o">&gt;</span> /tmp/Assets.json
//示例：
<span class="nb">sudo </span>xcrun <span class="nt">--sdk</span> iphoneos assetutil <span class="nt">--info</span> ./abc.app/Assets.car <span class="o">&gt;</span> /tmp/Assets.json
</code></pre></div>    </div>
  </li>
  <li>打开刚才生成的Assets.json文件，查找含有<code class="language-plaintext highlighter-rouge">"DisplayGamut" : "P3"</code>的内容。这个对应的Name就是出现问题的图片了。
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>open /tmp/Assets.json
</code></pre></div>    </div>
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
 </span><span class="nl">"Compression"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"lzfse"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"BitsPerSample"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">16</span><span class="p">,</span><span class="w">
 </span><span class="nl">"LayoutDirection"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"0 - Horizontal"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"AssetType"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"Image"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"ColorModel"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"RGB"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"Name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"CRM_msg_unread"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"PixelWidth"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">90</span><span class="p">,</span><span class="w">
 </span><span class="nl">"Graphics"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"GLES2,0"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"Subtype"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
 </span><span class="nl">"PixelHeight"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">90</span><span class="p">,</span><span class="w">
 </span><span class="nl">"SizeClass Horizontal"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"universal"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"EdgeInsets"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"top:0 left:0 bottom:0 right:0"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"Scale"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
 </span><span class="nl">"Memory"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"512MB"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"Opaque"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
 </span><span class="nl">"DisplayGamut"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"P3"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"Idiom"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"universal"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"Encoding"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"ARGB-16"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"Image Type"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"kCoreThemeOnePartScale"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"SizeClass Vertical"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"universal"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>找到对应的图片，使用mac自带的预览打开，编辑图片后保存就可以将图片保存成正确的格式</li>
  <li>除了使用上面的方法，还可以使用bash script直接处理所有图片为正确格式，这样我们就不用去定位是哪个图片的问题了，或许更方便一些
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">DIRECTORY</span><span class="o">=</span><span class="nv">$1</span>
<span class="nb">echo</span> <span class="s2">"------------------------------"</span>
<span class="nb">echo</span> <span class="s2">"Passed Resources with xcassets folder argument is &lt;</span><span class="nv">$DIRECTORY</span><span class="s2">&gt;"</span>
<span class="nb">echo</span> <span class="s2">"------------------------------"</span>
<span class="nb">echo</span> <span class="s2">"Processing asset:"</span>
<span class="nv">XSAASSETSD</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>find <span class="s2">"</span><span class="nv">$DIRECTORY</span><span class="s2">"</span> <span class="nt">-name</span> <span class="s1">'*.xcassets'</span><span class="si">)</span><span class="s2">"</span>
<span class="k">for </span>xcasset <span class="k">in</span> <span class="nv">$XSAASSETSD</span>
<span class="k">do
 </span><span class="nb">echo</span> <span class="s2">"---</span><span class="nv">$xcasset</span><span class="s2">"</span>
 <span class="nv">IMAGESETS</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>find <span class="s2">"</span><span class="nv">$xcasset</span><span class="s2">"</span> <span class="nt">-name</span> <span class="s1">'*.imageset'</span><span class="si">)</span><span class="s2">"</span>
 <span class="k">for </span>imageset <span class="k">in</span> <span class="nv">$IMAGESETS</span>
 <span class="k">do
     </span><span class="nb">echo</span> <span class="s2">"------</span><span class="nv">$imageset</span><span class="s2">"</span>
     <span class="nv">FILES</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>find <span class="s2">"</span><span class="nv">$imageset</span><span class="s2">"</span> <span class="nt">-name</span> <span class="s1">'*.png'</span><span class="si">)</span><span class="s2">"</span>
     <span class="k">for </span>file <span class="k">in</span> <span class="nv">$FILES</span> 
     <span class="k">do
         </span><span class="nb">echo</span> <span class="s2">"---------</span><span class="nv">$file</span><span class="s2">"</span>
         sips <span class="nt">-m</span> <span class="s2">"/System/Library/Colorsync/Profiles/sRGB Profile.icc"</span> <span class="nv">$file</span> <span class="nt">--out</span> <span class="nv">$file</span>
     <span class="k">done
 done
done
</span><span class="nb">echo</span> <span class="s2">"------------------------------"</span>
<span class="nb">echo</span> <span class="s2">"script successfully finished"</span>
<span class="nb">echo</span> <span class="s2">"------------------------------"</span>
</code></pre></div>    </div>
  </li>
</ol>

<h1 id="ipad-alertcontroller崩溃">ipad alertController崩溃</h1>

<p>同样的 UIAlertController 在iPhone上运行时正常，而切换到iPad上后发生崩溃</p>

<h4 id="出错原因-2">出错原因：</h4>
<blockquote>
  <h3 id="在ipad上actionsheet会被以popover的形式显示出来它衣服在当前页面的某一个组件上因为必须指定一个sourceview用于指定actionsheet的依附点在这个空间的周围被弹出同时还应指定一个sourcerect用于指定他被包含在哪一片区域内">在iPad上，ActionSheet会被以popover的形式显示出来，它衣服在当前页面的某一个组件上，因为必须指定一个sourceView用于指定ActionSheet的依附点（在这个空间的周围被弹出），同时还应指定一个sourceRect用于指定他被包含在哪一片区域内</h3>
</blockquote>

<h4 id="解决方法-2">解决方法</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//ipad使用，不加ipad上会崩溃</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">popoverController</span> <span class="o">=</span> <span class="n">alertController</span><span class="o">.</span><span class="n">popoverPresentationController</span> <span class="p">{</span>
            <span class="n">popoverController</span><span class="o">.</span><span class="n">sourceView</span> <span class="o">=</span> <span class="n">sender</span>
            <span class="n">popoverController</span><span class="o">.</span><span class="n">sourceRect</span> <span class="o">=</span> <span class="n">sender</span><span class="o">.</span><span class="n">bounds</span>
        <span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>注意：当你把一个Action的ActionStyle设置为cancel的时候，iPad将不会显示这个Action</p>
</blockquote>]]></content><author><name>DKJone</name></author><category term="xcode" /><category term="error" /><summary type="html"><![CDATA[xcode常见错误原因，和怎样处理]]></summary></entry><entry><title type="html">RxSwift-文档翻译</title><link href="http://0.0.0.0:4000/2016/12/12/RxSwift-%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91.html" rel="alternate" type="text/html" title="RxSwift-文档翻译" /><published>2016-12-12T00:00:00+08:00</published><updated>2016-12-12T23:27:01+08:00</updated><id>http://0.0.0.0:4000/2016/12/12/RxSwift-%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91</id><content type="html" xml:base="http://0.0.0.0:4000/2016/12/12/RxSwift-%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91.html"><![CDATA[<h1 id="rxswift-文档翻译">RxSwift-文档翻译</h1>

<h2 id="翻译后的完整项目地址"><a href="https://github.com/DKJone/RxSwift">翻译后的完整项目地址</a></h2>
<p>对RxSwift 官方playground的翻译，playGround基于2016年12月1日版本</p>

<blockquote>
  <h1 id="重要提示使用rxplayground">重要提示：使用Rx.playground：</h1>
  <ol>
    <li>打开Rx.xcworkspace.</li>
    <li>编译 RxSwift-macOS 项目 (Product → Build)</li>
    <li>在项目导航栏你打开RX playground</li>
    <li>打开调试窗口 (<strong>View</strong> → <strong>Debug Area</strong> → <strong>Show Debug Area</strong>).</li>
  </ol>
</blockquote>

<hr />

<h2 id="目录">目录:</h2>
<ol>
  <li><a href="/Introduction.md">序章 介绍</a></li>
  <li><a href="/Creating_and_Subscribing_to_Observables.md">第一章 创建并使用Observables</a></li>
  <li><a href="/Working_with_Subjects.md">第二章 使用Subjects</a></li>
  <li><a href="/Combining_Operators.md">第三章 组合</a></li>
  <li><a href="/Transforming_Operators.md">第四章 转换</a></li>
  <li><a href="/Filtering_and_Conditional_Operators.md">第五章 过滤</a></li>
  <li><a href="/Mathematical_and_Aggregate_Operators.md">第六章 数学理论</a></li>
  <li><a href="/Connectable_Operators.md">第七章 Connectable</a></li>
  <li><a href="/Error_Handling_Operators.md">第八章 错误处理</a></li>
  <li><a href="/Debugging_Operators.md">附录一 调试</a></li>
  <li><a href="/Enable_RxSwift.md">附录二 cocoapods</a></li>
</ol>

<p><a href="/Introduction.md">下一章</a></p>]]></content><author><name>DKJone</name></author><category term="RxSwift" /><category term="文档翻译" /><summary type="html"><![CDATA[对RxSwift 官方playground的翻译，playGround基于2016年12月1日版本]]></summary></entry><entry><title type="html"></title><link href="http://0.0.0.0:4000/2011/10/05/Jobs.html" rel="alternate" type="text/html" title="" /><published>2011-10-05T00:00:00+08:00</published><updated>2018-01-01T23:27:01+08:00</updated><id>http://0.0.0.0:4000/2011/10/05/Jobs</id><content type="html" xml:base="http://0.0.0.0:4000/2011/10/05/Jobs.html"><![CDATA[]]></content><author><name>DKJone</name></author></entry></feed>